Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LPAREN
    PUNTO
    INT
    LLLAVE
    RETURN
    RCORCH
    BOOLEAN
    ID
    DO
    WHILE
    MMENOS
    CADENA
    PRINT
    VAR
    RPAREN
    RLLAVE
    COMA
    STRING
    IF
    ASIG
    PROMPT
    PYC
    LCORCH
    FUNCTION

Grammar

Rule 0     S' -> e
Rule 1     e -> NEG r
Rule 2     e -> r
Rule 3     r -> r MENORQUE u
Rule 4     r -> u
Rule 5     u -> v SUM u
Rule 6     u -> v
Rule 7     v -> ENTERO

Terminals, with rules where they appear

ASIG                 : 
BOOLEAN              : 
CADENA               : 
COMA                 : 
DO                   : 
ENTERO               : 7
FUNCTION             : 
ID                   : 
IF                   : 
INT                  : 
LCORCH               : 
LLLAVE               : 
LPAREN               : 
MENORQUE             : 3
MMENOS               : 
NEG                  : 1
PRINT                : 
PROMPT               : 
PUNTO                : 
PYC                  : 
RCORCH               : 
RETURN               : 
RLLAVE               : 
RPAREN               : 
STRING               : 
SUM                  : 5
VAR                  : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

e                    : 0
r                    : 1 2 3
u                    : 3 4 5
v                    : 5 6

Parsing method: LALR

state 0

    (0) S' -> . e
    (1) e -> . NEG r
    (2) e -> . r
    (3) r -> . r MENORQUE u
    (4) r -> . u
    (5) u -> . v SUM u
    (6) u -> . v
    (7) v -> . ENTERO

    NEG             shift and go to state 4
    ENTERO          shift and go to state 1

    u                              shift and go to state 2
    e                              shift and go to state 3
    v                              shift and go to state 5
    r                              shift and go to state 6

state 1

    (7) v -> ENTERO .

    SUM             reduce using rule 7 (v -> ENTERO .)
    MENORQUE        reduce using rule 7 (v -> ENTERO .)
    $end            reduce using rule 7 (v -> ENTERO .)


state 2

    (4) r -> u .

    MENORQUE        reduce using rule 4 (r -> u .)
    $end            reduce using rule 4 (r -> u .)


state 3

    (0) S' -> e .



state 4

    (1) e -> NEG . r
    (3) r -> . r MENORQUE u
    (4) r -> . u
    (5) u -> . v SUM u
    (6) u -> . v
    (7) v -> . ENTERO

    ENTERO          shift and go to state 1

    u                              shift and go to state 2
    v                              shift and go to state 5
    r                              shift and go to state 7

state 5

    (5) u -> v . SUM u
    (6) u -> v .

    SUM             shift and go to state 8
    MENORQUE        reduce using rule 6 (u -> v .)
    $end            reduce using rule 6 (u -> v .)


state 6

    (2) e -> r .
    (3) r -> r . MENORQUE u

    $end            reduce using rule 2 (e -> r .)
    MENORQUE        shift and go to state 9


state 7

    (1) e -> NEG r .
    (3) r -> r . MENORQUE u

    $end            reduce using rule 1 (e -> NEG r .)
    MENORQUE        shift and go to state 9


state 8

    (5) u -> v SUM . u
    (5) u -> . v SUM u
    (6) u -> . v
    (7) v -> . ENTERO

    ENTERO          shift and go to state 1

    u                              shift and go to state 10
    v                              shift and go to state 5

state 9

    (3) r -> r MENORQUE . u
    (5) u -> . v SUM u
    (6) u -> . v
    (7) v -> . ENTERO

    ENTERO          shift and go to state 1

    u                              shift and go to state 11
    v                              shift and go to state 5

state 10

    (5) u -> v SUM u .

    MENORQUE        reduce using rule 5 (u -> v SUM u .)
    $end            reduce using rule 5 (u -> v SUM u .)


state 11

    (3) r -> r MENORQUE u .

    MENORQUE        reduce using rule 3 (r -> r MENORQUE u .)
    $end            reduce using rule 3 (r -> r MENORQUE u .)

